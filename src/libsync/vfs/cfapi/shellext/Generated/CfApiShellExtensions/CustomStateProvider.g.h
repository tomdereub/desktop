// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#include "winrt/CfApiShellExtensions.h"
#include "winrt/Windows.Storage.Provider.h"
namespace winrt::CfApiShellExtensions::implementation
{
    template <typename D, typename... I>
    struct __declspec(empty_bases) CustomStateProvider_base : implements<D, CfApiShellExtensions::CustomStateProvider, I...>
    {
        using base_type = CustomStateProvider_base;
        using class_type = CfApiShellExtensions::CustomStateProvider;
        using implements_type = typename CustomStateProvider_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"CfApiShellExtensions.CustomStateProvider";
        }
    };
}
namespace winrt::CfApiShellExtensions::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct __declspec(empty_bases) CustomStateProviderT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = CfApiShellExtensions::CustomStateProvider;

        hstring GetRuntimeClassName() const
        {
            return L"CfApiShellExtensions.CustomStateProvider";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_CUSTOMSTATEPROVIDER_XAML_G_H) || __has_include("CfApiShellExtensions/CustomStateProvider.xaml.g.h")
#include "CfApiShellExtensions/CustomStateProvider.xaml.g.h"
#else

namespace winrt::CfApiShellExtensions::implementation
{
    template <typename D, typename... I>
    using CustomStateProviderT = CustomStateProvider_base<D, I...>;
}

#endif
